Conclusion: 
In this question 13, we did a lot of charts. They allowed us to be confident on results since we loaded 4 years instead of one. They also gave us a clear idea of what we needed to do (and test)  in order to achieve a good accuracy. We could not do everything we planned because of a lack of time. But we will describe here the main things we wanted to try:

-First of all we wanted to be able to model our airport by some kind of facility that can make a fixed number of planes take off  in a given period of time. The delay would then accumulate itself over the day if the airport is trying to make take off more planes than it can in a given period of time.
 The first thing we will need to do is to plot for a given airport and a given day, the number of planes which are supposed take off in Y and the time in X. In the other chart we would have to plot as Y the number of delayed planes, and as X the time. This kind of graph could help us confirm our hypothesis. We already did those charts, but with all airports combined and with all days in a year. That alone could not confirm our model. 

-If that model were to be confirmed, we would have integrated it in our features by adding two columns to our Dataframe. The first one would be the number of planes which were supposed to take off before the current plane in this airport on this precise day. Then as the second column, we would have tried to compute the capacity of the airport, in term of planes per hour. We are still questioning ourselves with how to compute this very abstract feature. Our best shot for now is to take the number of flights that occur from an airport in a year, and then dividing it by the number of hours in a year. This result should be unique for each airport.
With those two columns added, we can then see if it helps the random forest better understand how airports work.

One of our main question was “Where does the delay come from?”. We were pretty sure that there would be more than one answer. And that some of those answer would have more impact than others. Even if it’s very difficult to even have hints about those, we took a different approach. We worked by dichotomy. This is actually was the most successful thing we did. It gave us some precious informations. Since we have the departure delay and the arrival delay, we can know how much time the plane lost or gain in flight by subtracting the two. We arrived at something like: departure_delay + air_delay = arrival_delay.
By comparing departure delay and arrival delay, we noticed that that the departure delay was making nearly everything. Of course we could have plotted more charts to support this idea but by lack of time we didn’t. At first we wanted after that to train our random forest model without parameters that would not impact the departure delay (such as destination_airport, distance, scheduled arrival time and others…). In other words we were saying that the departure delay was nearly equal to the arrival delay. 
That could be true. But if we believed that to be true, then we just could try to predict the air delay (with other parameters) and sum the two to have the arrival delay.
This actually make a lot of sense. We would train two random forests: one for the departure delay and one for the arrival delay. Because it makes no sense to use the distance to predict the total delay when we could actually tell our model that it only impacts the air delay. Same with the coordinates of the source airport or even the carrier, they won’t influence the air delay.
Our results were not incredibly good. But we still believe that by selecting correctly our two set of features and by tuning our parameters, we can acheive a way better precision than with a single random forest.

After this setback, we took some time to rethink the whole situation. We took some time to analyse the data again, and we thought about how we deal with missing values. When you look at random forests, it makes sense when a categorical value is missing, to put it in a distinct category: “missing”. The decision trees would treat it differently and understand by themselves that some data is missing. So we should not put the missing values into the most common category, but rather put it in the “missing” category. 
That is when we noticed a HUGE flaw with this notebook: when a plane is cancelled, there is no notion of delay. It’s just that the delay would be so high that the carrier( or the airport)  would just cancel it. But because the arrival delay is missing, we would replace the missing value by the average delay. Which is 5 minutes!!! We are telling our random forest that missing planes are actually 5 minutes late. Is there a problem? Yes there is. So what to do with those cancelled flights? We could give them infinite delay, or 24 hours delay. That would still be very weird. 
We tried something, removing all flights which have been canceled or which have an arrival delay above 2 hours and 30 minutes. By removing only 1.5% of the data, we would obtain an MSE of 327. Way better than before.
We had to rethink the whole problem of predictions. 
Let’s imagine we’re hired by a company to predict planes delays. We won’t know if a future plane will be cancelled or not. So we should predict it. Or at least say something like: “it’ll be 10 hours late so we can consider that it’ll be cancelled”. That is why, we took some initiative and decided to be pragmatic. We’re talking about flights inside the US (with the alaska and others outside the main land). Mainly, those flights should not exceed 10 hours. If we say “this flight will be 4 hours late” or “this flight will be 6 hours late” or “this flight will be cancelled”, it has a huge impact on our MSE if we predict one and it’s another. But for a traveller, it means the same. So we decided that we would not try to predict a numerical value first. We would first try to predict in which category this flight will be: either “this flight will be less than X hours late and will not be cancelled” either “this flight will be more than X hours late or will be cancelled”.
If we had more time, this is what we would do. Our future algorithm is detailed below. 
Since our prediction would be numerical and categorical at the same time, it’s a problem. We are still looking for some kind of error function like the MSE to be able to put a value on the accuracy of the final output.



Description: 3 random forests: 1 with a categorical output and 2 with a numerical output.


In the end we lacked of time to implement this new algorithm, find the best features and tweak the parameters like the number of trees and their depth. We now have an overview of the problem, what could be the answers, how to test our features, what to plot… All of that to understand even more our data and hopefully make useful predictions in the future.
